{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useLayoutEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { iosBlue } from \"../../../constants/colors\";\nimport Button from \"../../Button\";\n\nvar CancelButton = function CancelButton(_ref) {\n  var text = _ref.text,\n      visible = _ref.visible,\n      style = _ref.style,\n      textStyle = _ref.textStyle,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? 'cancel' : _ref$accessibilityLab,\n      onPress = _ref.onPress;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setWidth = _useState2[1];\n\n  var animationValue = useRef(new Animated.Value(visible ? 1 : 0));\n  useLayoutEffect(function () {\n    var animation = Animated.timing(animationValue.current, {\n      toValue: visible ? 1 : 0,\n      useNativeDriver: true,\n      duration: visible ? 250 : 200,\n      delay: visible ? 50 : 0,\n      easing: Easing.inOut(Easing.ease)\n    });\n    animation.start();\n    return animation.stop;\n  }, [visible]);\n  return React.createElement(Animated.View, {\n    style: [{\n      opacity: animationValue.current,\n      transform: [{\n        translateX: animationValue.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [width || 1, 0]\n        })\n      }]\n    }, !visible && styles.notVisible, style],\n    onLayout: function onLayout(e) {\n      setWidth(e.nativeEvent.layout.width);\n    }\n  }, React.createElement(Button, {\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(Text, {\n    style: [styles.cancelButtonText, textStyle],\n    allowFontScaling: false\n  }, text)));\n};\n\nvar styles = StyleSheet.create({\n  cancelButtonText: {\n    color: iosBlue,\n    fontSize: 16\n  },\n  notVisible: {\n    position: 'absolute',\n    right: 0\n  }\n});\nexport default CancelButton;","map":{"version":3,"sources":["CancelButton.tsx"],"names":["CancelButton","accessibilityLabel","onPress","useState","animationValue","useRef","Animated","visible","useLayoutEffect","animation","toValue","useNativeDriver","duration","delay","easing","Easing","opacity","transform","translateX","inputRange","outputRange","width","styles","e","setWidth","cancelButtonText","color","fontSize","notVisible","position","right"],"mappings":";AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,MAAA,EAAA,eAAA,QAAA,OAAA;;;;;AAUA,SAAA,OAAA;AACA,OAAA,MAAA;;AAWA,IAAMA,YAA6B,GAAG,SAAhCA,YAAgC,OAOhC;AAAA,MAPiC,IAOjC,QAPiC,IAOjC;AAAA,MAPiC,OAOjC,QAPiC,OAOjC;AAAA,MAPiC,KAOjC,QAPiC,KAOjC;AAAA,MAPiC,SAOjC,QAPiC,SAOjC;AAAA,mCAFFC,kBAEE;AAAA,MAFFA,kBAEE,sCAPiC,QAOjC;AAAA,MADFC,OACE,QADFA,OACE;;AACF,kBAA0BC,QAA1B,EAAA;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AACA,MAAMC,cAAc,GAAGC,MAAM,CAAC,IAAIC,QAAQ,CAAZ,KAAA,CAAmBC,OAAO,GAAA,CAAA,GAAxD,CAA8B,CAAD,CAA7B;AAEAC,EAAAA,eAAe,CAAC,YAAM;AAClB,QAAMC,SAAS,GAAG,QAAQ,CAAR,MAAA,CAAgBL,cAAc,CAA9B,OAAA,EAAwC;AACtDM,MAAAA,OAAO,EAAEH,OAAO,GAAA,CAAA,GADsC,CAAA;AAEtDI,MAAAA,eAAe,EAFuC,IAAA;AAGtDC,MAAAA,QAAQ,EAAEL,OAAO,GAAA,GAAA,GAHqC,GAAA;AAItDM,MAAAA,KAAK,EAAEN,OAAO,GAAA,EAAA,GAJwC,CAAA;AAKtDO,MAAAA,MAAM,EAAEC,MAAM,CAANA,KAAAA,CAAaA,MAAM,CAAnBA,IAAAA;AAL8C,KAAxC,CAAlB;AAOAN,IAAAA,SAAS,CAATA,KAAAA;AACA,WAAOA,SAAS,CAAhB,IAAA;AATW,GAAA,EAUZ,CAVHD,OAUG,CAVY,CAAfA;AAYA,SACI,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACI,IAAA,KAAK,EAAE,CACH;AACIQ,MAAAA,OAAO,EAAEZ,cAAc,CAD3B,OAAA;AAEIa,MAAAA,SAAS,EAAE,CACP;AACIC,QAAAA,UAAU,EAAE,cAAc,CAAd,OAAA,CAAA,WAAA,CAAmC;AAC3CC,UAAAA,UAAU,EAAE,CAAA,CAAA,EAD+B,CAC/B,CAD+B;AAE3CC,UAAAA,WAAW,EAAE,CAACC,KAAK,IAAN,CAAA,EAAA,CAAA;AAF8B,SAAnC;AADhB,OADO;AAFf,KADG,EAYH,CAAA,OAAA,IAAYC,MAAM,CAZf,UAAA,EADX,KACW,CADX;AAgBI,IAAA,QAAQ,EAAEC,kBAAAA,CAAC,EAAI;AACXC,MAAAA,QAAQ,CAACD,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CAATC,KAAQ,CAARA;AACH;AAlBL,GAAA,EAoBI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,OAAO,EAAf,OAAA;AAA0B,IAAA,kBAAkB,EAAEvB;AAA9C,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACI,IAAA,KAAK,EAAE,CAACqB,MAAM,CAAP,gBAAA,EADX,SACW,CADX;AAEI,IAAA,gBAAgB,EAAE;AAFtB,GAAA,EAtBZ,IAsBY,CADJ,CApBJ,CADJ;AAvBJ,CAAA;;AAwDA,IAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC7BG,EAAAA,gBAAgB,EAAE;AACdC,IAAAA,KAAK,EADS,OAAA;AAEdC,IAAAA,QAAQ,EAAE;AAFI,GADW;AAK7BC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,QAAQ,EAAV,UAAA;AAAwBC,IAAAA,KAAK,EAAE;AAA/B;AALiB,CAAlB,CAAf;AAQA,eAAA,YAAA","sourcesContent":["import React, { useState, useRef, useLayoutEffect } from 'react';\nimport {\n    Text,\n    StyleSheet,\n    Animated,\n    Easing,\n    StyleProp,\n    ViewStyle,\n    TextStyle,\n} from 'react-native';\nimport { iosBlue } from '../../../constants/colors';\nimport Button from '../../Button';\n\ntype Props = {\n    text: string;\n    visible: boolean;\n    onPress(): void;\n    style?: StyleProp<ViewStyle>;\n    textStyle?: StyleProp<TextStyle>;\n    accessibilityLabel?: string;\n};\n\nconst CancelButton: React.FC<Props> = ({\n    text,\n    visible,\n    style,\n    textStyle,\n    accessibilityLabel = 'cancel',\n    onPress,\n}) => {\n    const [width, setWidth] = useState<number>();\n    const animationValue = useRef(new Animated.Value(visible ? 1 : 0));\n\n    useLayoutEffect(() => {\n        const animation = Animated.timing(animationValue.current, {\n            toValue: visible ? 1 : 0,\n            useNativeDriver: true,\n            duration: visible ? 250 : 200,\n            delay: visible ? 50 : 0,\n            easing: Easing.inOut(Easing.ease),\n        });\n        animation.start();\n        return animation.stop;\n    }, [visible]);\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    opacity: animationValue.current,\n                    transform: [\n                        {\n                            translateX: animationValue.current.interpolate({\n                                inputRange: [0, 1],\n                                outputRange: [width || 1, 0],\n                            }),\n                        },\n                    ],\n                },\n                !visible && styles.notVisible,\n                style,\n            ]}\n            onLayout={e => {\n                setWidth(e.nativeEvent.layout.width);\n            }}\n        >\n            <Button onPress={onPress} accessibilityLabel={accessibilityLabel}>\n                <Text\n                    style={[styles.cancelButtonText, textStyle]}\n                    allowFontScaling={false}\n                >\n                    {text}\n                </Text>\n            </Button>\n        </Animated.View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    cancelButtonText: {\n        color: iosBlue,\n        fontSize: 16,\n    },\n    notVisible: { position: 'absolute', right: 0 },\n});\n\nexport default CancelButton;\n"]},"metadata":{},"sourceType":"module"}