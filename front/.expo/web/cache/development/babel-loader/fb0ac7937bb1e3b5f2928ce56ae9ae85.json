{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SearchIcon from \"../../icons/SearchIcon\";\nimport { androidLightPlaceholderGray, androidDarkPlaceholderGray } from \"../../../constants/colors\";\nimport ClearIcon from \"../../icons/ClearIconAndroid\";\nimport Button from \"../../Button\";\nvar SearchBar = forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'light' : _ref$theme,\n      _ref$placeholderTextC = _ref.placeholderTextColor,\n      placeholderTextColor = _ref$placeholderTextC === void 0 ? theme === 'light' ? androidLightPlaceholderGray : androidDarkPlaceholderGray : _ref$placeholderTextC,\n      _ref$iconColor = _ref.iconColor,\n      iconColor = _ref$iconColor === void 0 ? placeholderTextColor : _ref$iconColor,\n      _ref$selectionColor = _ref.selectionColor,\n      selectionColor = _ref$selectionColor === void 0 ? theme === 'light' ? androidLightPlaceholderGray : androidDarkPlaceholderGray : _ref$selectionColor,\n      clearAccessibilityLabel = _ref.clearAccessibilityLabel,\n      leftIcon = _ref.leftIcon,\n      style = _ref.style,\n      inputStyle = _ref.inputStyle,\n      children = _ref.children,\n      onChangeText = _ref.onChangeText,\n      onClear = _ref.onClear,\n      props = _objectWithoutProperties(_ref, [\"value\", \"theme\", \"placeholderTextColor\", \"iconColor\", \"selectionColor\", \"clearAccessibilityLabel\", \"leftIcon\", \"style\", \"inputStyle\", \"children\", \"onChangeText\", \"onClear\"]);\n\n  var styles = theme === 'light' ? defaultStyles : darkStyles;\n  var inputRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return inputRef.current;\n  });\n\n  var handleClear = function handleClear() {\n    if (onClear) {\n      onClear();\n    }\n\n    onChangeText('');\n  };\n\n  return React.createElement(View, {\n    style: [styles.wrapper, style]\n  }, React.createElement(TextInput, _extends({\n    ref: inputRef,\n    value: value,\n    selectionColor: selectionColor,\n    placeholderTextColor: placeholderTextColor,\n    onChangeText: onChangeText,\n    clearButtonMode: \"never\",\n    autoCorrect: false,\n    accessibilityRole: \"search\",\n    accessibilityTraits: \"search\"\n  }, props, {\n    style: [styles.input, inputStyle]\n  })), React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: styles.children\n  }, leftIcon ? React.createElement(View, {\n    style: styles.leftIcon\n  }, leftIcon) : React.createElement(SearchIcon, {\n    color: iconColor,\n    style: styles.leftIcon\n  }), children, value ? React.createElement(Button, {\n    onPress: handleClear,\n    hitSlop: 8,\n    accessibilityLabel: clearAccessibilityLabel,\n    style: styles.clearButton\n  }, React.createElement(ClearIcon, {\n    color: iconColor,\n    style: styles.clearIcon\n  })) : undefined));\n});\nvar defaultStyles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: '#FFF',\n    paddingHorizontal: 40,\n    paddingVertical: 12,\n    borderRadius: 4,\n    fontSize: 16,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3\n  },\n  children: {\n    position: 'absolute',\n    flexDirection: 'row',\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    elevation: 3\n  },\n  leftIcon: {\n    height: '40%',\n    aspectRatio: 1,\n    marginLeft: 10,\n    marginRight: 'auto'\n  },\n  clearButton: {\n    marginRight: 10\n  },\n  clearIcon: {\n    height: '40%',\n    aspectRatio: 1\n  }\n});\nvar darkStyles = StyleSheet.create(_objectSpread(_objectSpread({}, defaultStyles), {}, {\n  input: _objectSpread(_objectSpread({}, defaultStyles.input), {}, {\n    backgroundColor: '#28282d',\n    color: '#FFF'\n  })\n}));\nexport default SearchBar;","map":{"version":3,"sources":["index.tsx"],"names":["SearchBar","forwardRef","theme","placeholderTextColor","iconColor","selectionColor","onClear","props","styles","inputRef","useRef","useImperativeHandle","handleClear","onChangeText","children","leftIcon","value","clearButton","clearIcon","defaultStyles","wrapper","flexDirection","alignItems","input","flex","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","fontSize","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","position","aspectRatio","marginLeft","marginRight","darkStyles","color"],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { View, TextInput, StyleSheet } from 'react-native';\nimport type { SearchBarProps } from '../../../types';\nimport SearchIcon from '../../icons/SearchIcon';\nimport {\n    androidLightPlaceholderGray,\n    androidDarkPlaceholderGray,\n} from '../../../constants/colors';\nimport ClearIcon from '../../icons/ClearIconAndroid';\nimport Button from '../../Button';\n\nconst SearchBar = forwardRef<TextInput, SearchBarProps>(\n    (\n        {\n            value,\n            theme = 'light',\n            placeholderTextColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            iconColor = placeholderTextColor,\n            selectionColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            clearAccessibilityLabel,\n            leftIcon,\n            style,\n            inputStyle,\n            children,\n            onChangeText,\n            onClear,\n            ...props\n        },\n        ref\n    ) => {\n        const styles = theme === 'light' ? defaultStyles : darkStyles;\n\n        const inputRef = useRef<TextInput>(null);\n        useImperativeHandle(ref, () => inputRef.current!);\n\n        const handleClear = () => {\n            if (onClear) {\n                onClear();\n            }\n            onChangeText('');\n        };\n\n        return (\n            <View style={[styles.wrapper, style]}>\n                <TextInput\n                    ref={inputRef}\n                    value={value}\n                    selectionColor={selectionColor}\n                    placeholderTextColor={placeholderTextColor}\n                    onChangeText={onChangeText}\n                    clearButtonMode=\"never\"\n                    autoCorrect={false}\n                    accessibilityRole=\"search\"\n                    accessibilityTraits=\"search\"\n                    {...props}\n                    style={[styles.input, inputStyle]}\n                />\n                <View pointerEvents=\"box-none\" style={styles.children}>\n                    {leftIcon ? (\n                        <View style={styles.leftIcon}>{leftIcon}</View>\n                    ) : (\n                        <SearchIcon color={iconColor} style={styles.leftIcon} />\n                    )}\n                    {children}\n                    {value ? (\n                        <Button\n                            onPress={handleClear}\n                            hitSlop={8}\n                            accessibilityLabel={clearAccessibilityLabel}\n                            style={styles.clearButton}\n                        >\n                            <ClearIcon\n                                color={iconColor}\n                                style={styles.clearIcon}\n                            />\n                        </Button>\n                    ) : undefined}\n                </View>\n            </View>\n        );\n    }\n);\n\nconst defaultStyles = StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    input: {\n        flex: 1,\n        backgroundColor: '#FFF',\n        paddingHorizontal: 40,\n        paddingVertical: 12,\n        borderRadius: 4,\n        fontSize: 16,\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.22,\n        shadowRadius: 2.22,\n        elevation: 3,\n    },\n    children: {\n        position: 'absolute',\n        flexDirection: 'row',\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        elevation: 3,\n    },\n    leftIcon: {\n        height: '40%',\n        aspectRatio: 1,\n        marginLeft: 10,\n        marginRight: 'auto',\n    },\n    clearButton: {\n        marginRight: 10,\n    },\n    clearIcon: {\n        height: '40%',\n        aspectRatio: 1,\n    },\n});\n\nconst darkStyles = StyleSheet.create({\n    ...defaultStyles,\n    input: {\n        ...defaultStyles.input,\n        backgroundColor: '#28282d',\n        color: '#FFF',\n    },\n});\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}